/* Generated from schema\oc2ls-v1.0.1-acme_rsp.jadn, Mon Nov  4 15:03:29 2019 */

       title: SLPF + Acme schema - Response
      module: http://oasis-open.org/openc2/oc2ls/v1.0.1/acme/rsp
       patch: 0
 description: OpenC2 LS version 1.0 + errata + SLPF + Acme types
     exports: ['OpenC2-Response']
      config: {'$FS': ':', '$FieldName': '^[a-z][-_:a-z0-9]{0,31}$'}

OpenC2-Response = Map {
     1 status          Status-Code,              // An integer status code
     2 status_text     String optional,          // A free-form human-readable description of the Response status
     3 results         Results optional          // Map of key:value pairs that contain additional results based on the invoking Command.
}

Results = Map{1..*} {
     1 versions        Version [0..*] unique,    // List of OpenC2 language versions supported by this Actuator
     2 profiles        ArrayOf(Nsid) optional,   // List of profiles supported by this Actuator
     3 pairs           Action-Targets optional,  // List of targets applicable to each supported Action
     4 rate_limit      Number optional,          // Maximum number of requests per minute supported by design or policy
  1024 slpf:           P-Results optional,       // Result properties defined in the Stateless Packet Filtering Profile
  3010 x-esm:          P-Results$esm optional,   // Results from the hypothetical Energy Storage Manager profile
  3011 x-acme:         P-Results$acme optional,  // Results from the hypothetical Acme profile
  3012 x-mycompany:    P-Results$myco optional   // Results from the hypothetical My Company profile
}

Action-Targets = Map{1..*} {                 // Map of each action supported by this actuator to the list of targets applicable to that action.
     1 scan            Tgt-scan [0..10] unique,
     2 locate          Tgt-locate [0..10] unique,
     3 query           Tgt-query [0..10] unique,
     6 deny            Tgt-deny [0..10] unique,
     7 contain         Tgt-contain [0..10] unique,
     8 allow           Tgt-allow [0..10] unique,
     9 start           Tgt-start [0..10] unique,
    10 stop            Tgt-stop [0..10] unique,
    11 restart         Tgt-restart [0..10] unique,
    14 cancel          Tgt-cancel [0..10] unique,
    15 set             Tgt-set [0..10] unique,
    16 update          Tgt-update [0..10] unique,
    18 redirect        Tgt-redirect [0..10] unique,
    19 create          Tgt-create [0..10] unique,
    20 delete          Tgt-delete [0..10] unique,
    22 detonate        Tgt-detonate [0..10] unique,
    23 restore         Tgt-restore [0..10] unique,
    28 copy            Tgt-copy [0..10] unique,
    30 investigate     Tgt-investigate [0..10] unique,
    32 remediate       Tgt-remediate [0..10] unique
}

Tgt-scan = Enumerated {
}

Tgt-locate = Enumerated {
}

Tgt-query = Enumerated {
     1 features
}

Tgt-deny = Enumerated {
     1 file,
     2 ipv4_net,
     3 ipv6_net,
     4 ipv4_connection,
     5 ipv6_connection
}

Tgt-contain = Enumerated {
     1 device
}

Tgt-allow = Enumerated {
     1 device,
     2 file,
     3 ipv4_net,
     4 ipv6_net,
     5 ipv4_connection,
     6 ipv6_connection
}

Tgt-start = Enumerated {
}

Tgt-stop = Enumerated {
}

Tgt-restart = Enumerated {
}

Tgt-cancel = Enumerated {
}

Tgt-set = Enumerated {
}

Tgt-update = Enumerated {
     1 file
}

Tgt-redirect = Enumerated {
}

Tgt-create = Enumerated {
}

Tgt-delete = Enumerated {
     1 slpf:rule_number
}

Tgt-detonate = Enumerated {
}

Tgt-restore = Enumerated {
}

Tgt-copy = Enumerated {
}

Tgt-investigate = Enumerated {
}

Tgt-remediate = Enumerated {
     1 file
}

Status-Code = Enumerated.ID {
   102                                           // Processing:: an interim Response used to inform the Producer that the Consumer has accepted the Command but has not yet completed it.
   200                                           // OK:: the Command has succeeded.
   400                                           // BadRequest:: the Consumer cannot process the Command due to something that is perceived to be a Producer error (e.g., malformed Command syntax).
   401                                           // Unauthorized:: the Command Message lacks valid authentication credentials for the target resource or authorization has been refused for the submitted credentials.
   403                                           // Forbidden:: the Consumer understood the Command but refuses to authorize it.
   404                                           // NotFound:: the Consumer has not found anything matching the Command.
   500                                           // InternalError:: the Consumer encountered an unexpected condition that prevented it from performing the Command.
   501                                           // NotImplemented:: the Consumer does not support the functionality required to perform the Command.
   503                                           // ServiceUnavailable:: the Consumer is currently unable to perform the Command due to a temporary overloading or maintenance of the Consumer.
}

Nsid = String{1..16}                         // A short identifier that refers to a namespace.

Version = String                             // Major.Minor version number

Rule-ID = Integer                            // Access rule identifier

P-Results = Map {                            // SLPF results
  1024 rule_number     Rule-ID optional          // Rule identifier returned from allow or deny Command.
}

P-Results$acme = Map {                       // Acme results
     1 status_detail   String optional
}

P-Results$myco = Map{1..*} {                 // My Company results
     1 stuff           Stuff$myco optional
}

Stuff$myco = Record {                        // My Company results value
     1 some            Integer,
     2 values          Boolean [0..*],
     3 defined         String
}

P-Results$esm = Map{1..*} {                  // ESM results
     1 asset_id        String optional,
     2 battery         Battery optional
}

Battery = Record {                           // ESM Battery properties
     1 capacity        Number,
     2 charged_at      Integer,
     3 status          Integer,
     4 mode            Battery-Mode,
     5 visible_on_display Boolean
}

Battery-Mode = Record {                      // ESM Battery profile, Mode properties
     1 output          Output-Mode,
     2 supported       ArrayOf(Output-Mode)
}

Output-Mode = Enumerated {                   // ESM Battery Mode items
    10 high,
    13 trickle
}
